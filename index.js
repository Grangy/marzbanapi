require("dotenv").config();
const express = require("express");
const axios = require("axios");
const https = require("https");

const app = express();
app.use(express.json());

const agent = new https.Agent({ rejectUnauthorized: false });

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ access token
 */
async function getToken() {
  const res = await axios.post(
    `${process.env.MARZBAN_URL}/api/admin/token`,
    new URLSearchParams({
      username: process.env.MARZBAN_USERNAME,
      password: process.env.MARZBAN_PASSWORD,
    }),
    {
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      httpsAgent: agent,
    }
  );
  return res.data.access_token;
}

/**
 * –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ü—Ä–∏–º–µ—Ä: POST /users/testvless/extend?days=30
 */
app.post("/users/:username/extend", async (req, res) => {
  try {
    const token = await getToken();
    const username = req.params.username;
    const days = parseInt(req.query.days || "30", 10);

    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRes = await axios.get(
      `${process.env.MARZBAN_URL}/api/user/${username}`,
      {
        headers: { Authorization: `Bearer ${token}` },
        httpsAgent: agent,
      }
    );

    const user = userRes.data;

    // 2. –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const now = Math.floor(Date.now() / 1000); // —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (UTC timestamp)
    let currentExpire = user.expire || 0;

    if (currentExpire === 0 || currentExpire < now) {
      // –µ—Å–ª–∏ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ —Å—Ä–æ–∫ —É–∂–µ –∏—Å—Ç—ë–∫ ‚Üí –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á—ë—Ç —Å "—Å–µ–π—á–∞—Å"
      currentExpire = now;
    }

    const newExpire = currentExpire + days * 24 * 60 * 60;

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateRes = await axios.put(
      `${process.env.MARZBAN_URL}/api/user/${username}`,
      {
        expire: newExpire,
      },
      {
        headers: { Authorization: `Bearer ${token}` },
        httpsAgent: agent,
      }
    );

    res.json({
      message: `–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ ${days} –¥–Ω–µ–π`,
      old_expire: user.expire,
      new_expire: newExpire,
      data: updateRes.data,
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", err.response?.data || err.message);
    res.status(500).json({ error: err.response?.data || err.message });
  }
});


/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ Shnitcel, –Ω–æ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∏–º–µ–Ω–µ–º)
 */
app.post("/users", async (req, res) => {
  try {
    const token = await getToken();
    const userData = req.body;

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "telegramId_M12_x"
    // –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—ë—à—å telegramId –∏ —Å—á—ë—Ç—á–∏–∫
    const username =
      userData.username ||
      `${userData.telegram_id || "user"}_M12_${Math.floor(Math.random() * 10000)}`;

    const payload = {
      username,
      status: "active",
      expire: null,                       // –±–µ—Å—Å—Ä–æ—á–Ω–æ (–∫–∞–∫ Shnitcel)
      data_limit: null,                   // –±–µ–∑ –ª–∏–º–∏—Ç–∞
      data_limit_reset_strategy: "no_reset",
      proxies: { vless: {} },             // VLESS –≤–∫–ª—é—á–µ–Ω
      note: userData.note || "",          // –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
      excluded_inbounds: { vless: [] },   // –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º inbound
    };

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º payload –≤ Marzban:", payload);

    const createRes = await axios.post(
      `${process.env.MARZBAN_URL}/api/user`,
      payload,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        httpsAgent: agent,
      }
    );

    res.json(createRes.data);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:", err.response?.data || err.message);
    res.status(500).json({ error: err.response?.data || err.message });
  }
});


// –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ–ª–Ω—ã–π)
app.get("/users", async (req, res) => {
  try {
    const token = await getToken();
    const usersRes = await axios.get(`${process.env.MARZBAN_URL}/api/users`, {
      headers: { Authorization: `Bearer ${token}` },
      httpsAgent: agent,
    });

    // –æ—Ç–¥–∞—ë–º –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å
    res.json(usersRes.data);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞:", err.response?.data || err.message);
    res.status(500).json({ error: err.response?.data || err.message });
  }
});



/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
app.delete("/users/:username", async (req, res) => {
  try {
    const token = await getToken();
    const username = req.params.username;

    const delRes = await axios.delete(
      `${process.env.MARZBAN_URL}/api/user/${username}`,
      {
        headers: { Authorization: `Bearer ${token}` },
        httpsAgent: agent,
      }
    );

    res.json({ message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —É–¥–∞–ª—ë–Ω`, data: delRes.data });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", err.response?.data || err.message);
    res.status(500).json({ error: err.response?.data || err.message });
  }
});

app.get("/ping", (req, res) => {
  res.json({ status: "ok", message: "üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!" });
});

app.listen(process.env.PORT, () => {
  console.log(`üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${process.env.PORT}`);
});
